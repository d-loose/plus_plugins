// Mocks generated by Mockito 5.3.2 from annotations
// in connectivity_plus/test/connectivity_plus_linux_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dbus/dbus.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:networkd/src/link.dart' as _i3;
import 'package:networkd/src/manager.dart' as _i7;
import 'package:networkd/src/models.dart' as _i4;
import 'package:nm/src/network_manager_client.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNetworkManagerSettings_0 extends _i1.SmartFake
    implements _i2.NetworkManagerSettings {
  _FakeNetworkManagerSettings_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNetworkManagerDnsManager_1 extends _i1.SmartFake
    implements _i2.NetworkManagerDnsManager {
  _FakeNetworkManagerDnsManager_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNetworkManagerActiveConnection_2 extends _i1.SmartFake
    implements _i2.NetworkManagerActiveConnection {
  _FakeNetworkManagerActiveConnection_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNetworkdLink_3 extends _i1.SmartFake implements _i3.NetworkdLink {
  _FakeNetworkdLink_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNetworkdLinkDescription_4 extends _i1.SmartFake
    implements _i4.NetworkdLinkDescription {
  _FakeNetworkdLinkDescription_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNetworkdManagerDescription_5 extends _i1.SmartFake
    implements _i4.NetworkdManagerDescription {
  _FakeNetworkdManagerDescription_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NetworkManagerClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkManagerClient extends _i1.Mock
    implements _i2.NetworkManagerClient {
  MockNetworkManagerClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<_i2.NetworkManagerDevice> get deviceAdded => (super.noSuchMethod(
        Invocation.getter(#deviceAdded),
        returnValue: _i5.Stream<_i2.NetworkManagerDevice>.empty(),
      ) as _i5.Stream<_i2.NetworkManagerDevice>);
  @override
  _i5.Stream<_i2.NetworkManagerDevice> get deviceRemoved => (super.noSuchMethod(
        Invocation.getter(#deviceRemoved),
        returnValue: _i5.Stream<_i2.NetworkManagerDevice>.empty(),
      ) as _i5.Stream<_i2.NetworkManagerDevice>);
  @override
  _i5.Stream<_i2.NetworkManagerActiveConnection> get activeConnectionAdded =>
      (super.noSuchMethod(
        Invocation.getter(#activeConnectionAdded),
        returnValue: _i5.Stream<_i2.NetworkManagerActiveConnection>.empty(),
      ) as _i5.Stream<_i2.NetworkManagerActiveConnection>);
  @override
  _i5.Stream<_i2.NetworkManagerActiveConnection> get activeConnectionRemoved =>
      (super.noSuchMethod(
        Invocation.getter(#activeConnectionRemoved),
        returnValue: _i5.Stream<_i2.NetworkManagerActiveConnection>.empty(),
      ) as _i5.Stream<_i2.NetworkManagerActiveConnection>);
  @override
  _i5.Stream<List<String>> get propertiesChanged => (super.noSuchMethod(
        Invocation.getter(#propertiesChanged),
        returnValue: _i5.Stream<List<String>>.empty(),
      ) as _i5.Stream<List<String>>);
  @override
  List<_i2.NetworkManagerDevice> get devices => (super.noSuchMethod(
        Invocation.getter(#devices),
        returnValue: <_i2.NetworkManagerDevice>[],
      ) as List<_i2.NetworkManagerDevice>);
  @override
  List<_i2.NetworkManagerDevice> get allDevices => (super.noSuchMethod(
        Invocation.getter(#allDevices),
        returnValue: <_i2.NetworkManagerDevice>[],
      ) as List<_i2.NetworkManagerDevice>);
  @override
  bool get networkingEnabled => (super.noSuchMethod(
        Invocation.getter(#networkingEnabled),
        returnValue: false,
      ) as bool);
  @override
  bool get wirelessEnabled => (super.noSuchMethod(
        Invocation.getter(#wirelessEnabled),
        returnValue: false,
      ) as bool);
  @override
  bool get wirelessHardwareEnabled => (super.noSuchMethod(
        Invocation.getter(#wirelessHardwareEnabled),
        returnValue: false,
      ) as bool);
  @override
  bool get wwanEnabled => (super.noSuchMethod(
        Invocation.getter(#wwanEnabled),
        returnValue: false,
      ) as bool);
  @override
  bool get wwanHardwareEnabled => (super.noSuchMethod(
        Invocation.getter(#wwanHardwareEnabled),
        returnValue: false,
      ) as bool);
  @override
  List<_i2.NetworkManagerActiveConnection> get activeConnections =>
      (super.noSuchMethod(
        Invocation.getter(#activeConnections),
        returnValue: <_i2.NetworkManagerActiveConnection>[],
      ) as List<_i2.NetworkManagerActiveConnection>);
  @override
  String get primaryConnectionType => (super.noSuchMethod(
        Invocation.getter(#primaryConnectionType),
        returnValue: '',
      ) as String);
  @override
  _i2.NetworkManagerMetered get metered => (super.noSuchMethod(
        Invocation.getter(#metered),
        returnValue: _i2.NetworkManagerMetered.unknown,
      ) as _i2.NetworkManagerMetered);
  @override
  bool get startup => (super.noSuchMethod(
        Invocation.getter(#startup),
        returnValue: false,
      ) as bool);
  @override
  String get version => (super.noSuchMethod(
        Invocation.getter(#version),
        returnValue: '',
      ) as String);
  @override
  _i2.NetworkManagerConnectivityState get connectivity => (super.noSuchMethod(
        Invocation.getter(#connectivity),
        returnValue: _i2.NetworkManagerConnectivityState.unknown,
      ) as _i2.NetworkManagerConnectivityState);
  @override
  bool get connectivityCheckAvailable => (super.noSuchMethod(
        Invocation.getter(#connectivityCheckAvailable),
        returnValue: false,
      ) as bool);
  @override
  bool get connectivityCheckEnabled => (super.noSuchMethod(
        Invocation.getter(#connectivityCheckEnabled),
        returnValue: false,
      ) as bool);
  @override
  String get connectivityCheckUri => (super.noSuchMethod(
        Invocation.getter(#connectivityCheckUri),
        returnValue: '',
      ) as String);
  @override
  _i2.NetworkManagerState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i2.NetworkManagerState.unknown,
      ) as _i2.NetworkManagerState);
  @override
  _i2.NetworkManagerSettings get settings => (super.noSuchMethod(
        Invocation.getter(#settings),
        returnValue: _FakeNetworkManagerSettings_0(
          this,
          Invocation.getter(#settings),
        ),
      ) as _i2.NetworkManagerSettings);
  @override
  _i2.NetworkManagerDnsManager get dnsManager => (super.noSuchMethod(
        Invocation.getter(#dnsManager),
        returnValue: _FakeNetworkManagerDnsManager_1(
          this,
          Invocation.getter(#dnsManager),
        ),
      ) as _i2.NetworkManagerDnsManager);
  @override
  _i5.Future<void> connect() => (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> setWirelessEnabled(bool? value) => (super.noSuchMethod(
        Invocation.method(
          #setWirelessEnabled,
          [value],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> setWwanEnabled(bool? value) => (super.noSuchMethod(
        Invocation.method(
          #setWwanEnabled,
          [value],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> setConnectivityCheckEnabled(bool? value) =>
      (super.noSuchMethod(
        Invocation.method(
          #setConnectivityCheckEnabled,
          [value],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<_i2.NetworkManagerActiveConnection> addAndActivateConnection({
    Map<String, Map<String, _i6.DBusValue>>? connection = const {},
    required _i2.NetworkManagerDevice? device,
    _i2.NetworkManagerAccessPoint? accessPoint,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addAndActivateConnection,
          [],
          {
            #connection: connection,
            #device: device,
            #accessPoint: accessPoint,
          },
        ),
        returnValue: _i5.Future<_i2.NetworkManagerActiveConnection>.value(
            _FakeNetworkManagerActiveConnection_2(
          this,
          Invocation.method(
            #addAndActivateConnection,
            [],
            {
              #connection: connection,
              #device: device,
              #accessPoint: accessPoint,
            },
          ),
        )),
      ) as _i5.Future<_i2.NetworkManagerActiveConnection>);
  @override
  _i5.Future<_i2.NetworkManagerActiveConnection> activateConnection({
    required _i2.NetworkManagerDevice? device,
    _i2.NetworkManagerSettingsConnection? connection,
    _i2.NetworkManagerAccessPoint? accessPoint,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #activateConnection,
          [],
          {
            #device: device,
            #connection: connection,
            #accessPoint: accessPoint,
          },
        ),
        returnValue: _i5.Future<_i2.NetworkManagerActiveConnection>.value(
            _FakeNetworkManagerActiveConnection_2(
          this,
          Invocation.method(
            #activateConnection,
            [],
            {
              #device: device,
              #connection: connection,
              #accessPoint: accessPoint,
            },
          ),
        )),
      ) as _i5.Future<_i2.NetworkManagerActiveConnection>);
  @override
  _i5.Future<void> deactivateConnection(
          _i2.NetworkManagerActiveConnection? connection) =>
      (super.noSuchMethod(
        Invocation.method(
          #deactivateConnection,
          [connection],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [NetworkdManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkdManager extends _i1.Mock implements _i7.NetworkdManager {
  MockNetworkdManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<List<String>> get propertiesChanged => (super.noSuchMethod(
        Invocation.getter(#propertiesChanged),
        returnValue: _i5.Stream<List<String>>.empty(),
      ) as _i5.Stream<List<String>>);
  @override
  String get operationalState => (super.noSuchMethod(
        Invocation.getter(#operationalState),
        returnValue: '',
      ) as String);
  @override
  String get carrierState => (super.noSuchMethod(
        Invocation.getter(#carrierState),
        returnValue: '',
      ) as String);
  @override
  String get addressState => (super.noSuchMethod(
        Invocation.getter(#addressState),
        returnValue: '',
      ) as String);
  @override
  String get ipv4AddressState => (super.noSuchMethod(
        Invocation.getter(#ipv4AddressState),
        returnValue: '',
      ) as String);
  @override
  String get ipv6AddressState => (super.noSuchMethod(
        Invocation.getter(#ipv6AddressState),
        returnValue: '',
      ) as String);
  @override
  String get onlineState => (super.noSuchMethod(
        Invocation.getter(#onlineState),
        returnValue: '',
      ) as String);
  @override
  int get namespaceId => (super.noSuchMethod(
        Invocation.getter(#namespaceId),
        returnValue: 0,
      ) as int);
  @override
  _i5.Future<void> connect() => (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<List<_i3.NetworkdLink>> listLinks({
    bool? noAutoStart = false,
    bool? allowInteractiveAuthorization = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listLinks,
          [],
          {
            #noAutoStart: noAutoStart,
            #allowInteractiveAuthorization: allowInteractiveAuthorization,
          },
        ),
        returnValue:
            _i5.Future<List<_i3.NetworkdLink>>.value(<_i3.NetworkdLink>[]),
      ) as _i5.Future<List<_i3.NetworkdLink>>);
  @override
  _i5.Future<_i3.NetworkdLink> getLinkByName(
    String? name, {
    bool? noAutoStart = false,
    bool? allowInteractiveAuthorization = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLinkByName,
          [name],
          {
            #noAutoStart: noAutoStart,
            #allowInteractiveAuthorization: allowInteractiveAuthorization,
          },
        ),
        returnValue: _i5.Future<_i3.NetworkdLink>.value(_FakeNetworkdLink_3(
          this,
          Invocation.method(
            #getLinkByName,
            [name],
            {
              #noAutoStart: noAutoStart,
              #allowInteractiveAuthorization: allowInteractiveAuthorization,
            },
          ),
        )),
      ) as _i5.Future<_i3.NetworkdLink>);
  @override
  _i5.Future<_i3.NetworkdLink> getLinkByIndex(
    int? ifindex, {
    bool? noAutoStart = false,
    bool? allowInteractiveAuthorization = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLinkByIndex,
          [ifindex],
          {
            #noAutoStart: noAutoStart,
            #allowInteractiveAuthorization: allowInteractiveAuthorization,
          },
        ),
        returnValue: _i5.Future<_i3.NetworkdLink>.value(_FakeNetworkdLink_3(
          this,
          Invocation.method(
            #getLinkByIndex,
            [ifindex],
            {
              #noAutoStart: noAutoStart,
              #allowInteractiveAuthorization: allowInteractiveAuthorization,
            },
          ),
        )),
      ) as _i5.Future<_i3.NetworkdLink>);
  @override
  _i5.Future<void> setLinkNTP(
    int? ifindex,
    List<String>? servers, {
    bool? noAutoStart = false,
    bool? allowInteractiveAuthorization = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setLinkNTP,
          [
            ifindex,
            servers,
          ],
          {
            #noAutoStart: noAutoStart,
            #allowInteractiveAuthorization: allowInteractiveAuthorization,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> setLinkDNS(
    int? ifindex,
    List<_i6.DBusStruct>? addresses, {
    bool? noAutoStart = false,
    bool? allowInteractiveAuthorization = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setLinkDNS,
          [
            ifindex,
            addresses,
          ],
          {
            #noAutoStart: noAutoStart,
            #allowInteractiveAuthorization: allowInteractiveAuthorization,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> setLinkDNSEx(
    int? ifindex,
    List<_i6.DBusStruct>? addresses, {
    bool? noAutoStart = false,
    bool? allowInteractiveAuthorization = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setLinkDNSEx,
          [
            ifindex,
            addresses,
          ],
          {
            #noAutoStart: noAutoStart,
            #allowInteractiveAuthorization: allowInteractiveAuthorization,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> setLinkDomains(
    int? ifindex,
    List<_i6.DBusStruct>? domains, {
    bool? noAutoStart = false,
    bool? allowInteractiveAuthorization = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setLinkDomains,
          [
            ifindex,
            domains,
          ],
          {
            #noAutoStart: noAutoStart,
            #allowInteractiveAuthorization: allowInteractiveAuthorization,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> setLinkDefaultRoute(
    int? ifindex,
    bool? enable, {
    bool? noAutoStart = false,
    bool? allowInteractiveAuthorization = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setLinkDefaultRoute,
          [
            ifindex,
            enable,
          ],
          {
            #noAutoStart: noAutoStart,
            #allowInteractiveAuthorization: allowInteractiveAuthorization,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> setLinkLLMNR(
    int? ifindex,
    String? mode, {
    bool? noAutoStart = false,
    bool? allowInteractiveAuthorization = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setLinkLLMNR,
          [
            ifindex,
            mode,
          ],
          {
            #noAutoStart: noAutoStart,
            #allowInteractiveAuthorization: allowInteractiveAuthorization,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> setLinkMulticastDNS(
    int? ifindex,
    String? mode, {
    bool? noAutoStart = false,
    bool? allowInteractiveAuthorization = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setLinkMulticastDNS,
          [
            ifindex,
            mode,
          ],
          {
            #noAutoStart: noAutoStart,
            #allowInteractiveAuthorization: allowInteractiveAuthorization,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> setLinkDNSOverTLS(
    int? ifindex,
    String? mode, {
    bool? noAutoStart = false,
    bool? allowInteractiveAuthorization = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setLinkDNSOverTLS,
          [
            ifindex,
            mode,
          ],
          {
            #noAutoStart: noAutoStart,
            #allowInteractiveAuthorization: allowInteractiveAuthorization,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> setLinkDNSSEC(
    int? ifindex,
    String? mode, {
    bool? noAutoStart = false,
    bool? allowInteractiveAuthorization = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setLinkDNSSEC,
          [
            ifindex,
            mode,
          ],
          {
            #noAutoStart: noAutoStart,
            #allowInteractiveAuthorization: allowInteractiveAuthorization,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> setLinkDNSSECNegativeTrustAnchors(
    int? ifindex,
    List<String>? names, {
    bool? noAutoStart = false,
    bool? allowInteractiveAuthorization = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setLinkDNSSECNegativeTrustAnchors,
          [
            ifindex,
            names,
          ],
          {
            #noAutoStart: noAutoStart,
            #allowInteractiveAuthorization: allowInteractiveAuthorization,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> revertLinkNTP(
    int? ifindex, {
    bool? noAutoStart = false,
    bool? allowInteractiveAuthorization = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #revertLinkNTP,
          [ifindex],
          {
            #noAutoStart: noAutoStart,
            #allowInteractiveAuthorization: allowInteractiveAuthorization,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> revertLinkDNS(
    int? ifindex, {
    bool? noAutoStart = false,
    bool? allowInteractiveAuthorization = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #revertLinkDNS,
          [ifindex],
          {
            #noAutoStart: noAutoStart,
            #allowInteractiveAuthorization: allowInteractiveAuthorization,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> renewLink(
    int? ifindex, {
    bool? noAutoStart = false,
    bool? allowInteractiveAuthorization = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #renewLink,
          [ifindex],
          {
            #noAutoStart: noAutoStart,
            #allowInteractiveAuthorization: allowInteractiveAuthorization,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> forceRenewLink(
    int? ifindex, {
    bool? noAutoStart = false,
    bool? allowInteractiveAuthorization = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #forceRenewLink,
          [ifindex],
          {
            #noAutoStart: noAutoStart,
            #allowInteractiveAuthorization: allowInteractiveAuthorization,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> reconfigureLink(
    int? ifindex, {
    bool? noAutoStart = false,
    bool? allowInteractiveAuthorization = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #reconfigureLink,
          [ifindex],
          {
            #noAutoStart: noAutoStart,
            #allowInteractiveAuthorization: allowInteractiveAuthorization,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> reload({
    bool? noAutoStart = false,
    bool? allowInteractiveAuthorization = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
          {
            #noAutoStart: noAutoStart,
            #allowInteractiveAuthorization: allowInteractiveAuthorization,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<_i4.NetworkdLinkDescription> describeLink(
    int? ifindex, {
    bool? noAutoStart = false,
    bool? allowInteractiveAuthorization = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeLink,
          [ifindex],
          {
            #noAutoStart: noAutoStart,
            #allowInteractiveAuthorization: allowInteractiveAuthorization,
          },
        ),
        returnValue: _i5.Future<_i4.NetworkdLinkDescription>.value(
            _FakeNetworkdLinkDescription_4(
          this,
          Invocation.method(
            #describeLink,
            [ifindex],
            {
              #noAutoStart: noAutoStart,
              #allowInteractiveAuthorization: allowInteractiveAuthorization,
            },
          ),
        )),
      ) as _i5.Future<_i4.NetworkdLinkDescription>);
  @override
  _i5.Future<_i4.NetworkdManagerDescription> describe({
    bool? noAutoStart = false,
    bool? allowInteractiveAuthorization = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describe,
          [],
          {
            #noAutoStart: noAutoStart,
            #allowInteractiveAuthorization: allowInteractiveAuthorization,
          },
        ),
        returnValue: _i5.Future<_i4.NetworkdManagerDescription>.value(
            _FakeNetworkdManagerDescription_5(
          this,
          Invocation.method(
            #describe,
            [],
            {
              #noAutoStart: noAutoStart,
              #allowInteractiveAuthorization: allowInteractiveAuthorization,
            },
          ),
        )),
      ) as _i5.Future<_i4.NetworkdManagerDescription>);
}
